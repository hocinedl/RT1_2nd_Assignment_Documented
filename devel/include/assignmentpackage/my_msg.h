// Generated by gencpp from file assignmentpackage/my_msg.msg
// DO NOT EDIT!


#ifndef ASSIGNMENTPACKAGE_MESSAGE_MY_MSG_H
#define ASSIGNMENTPACKAGE_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignmentpackage
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : vel_x(0.0)
    , vel_y(0.0)
    , position_x(0.0)
    , position_y(0.0)  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : vel_x(0.0)
    , vel_y(0.0)
    , position_x(0.0)
    , position_y(0.0)  {
  (void)_alloc;
    }



   typedef float _vel_x_type;
  _vel_x_type vel_x;

   typedef float _vel_y_type;
  _vel_y_type vel_y;

   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;





  typedef boost::shared_ptr< ::assignmentpackage::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignmentpackage::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::assignmentpackage::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::assignmentpackage::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::assignmentpackage::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignmentpackage::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignmentpackage::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignmentpackage::my_msg_<ContainerAllocator1> & lhs, const ::assignmentpackage::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.vel_x == rhs.vel_x &&
    lhs.vel_y == rhs.vel_y &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignmentpackage::my_msg_<ContainerAllocator1> & lhs, const ::assignmentpackage::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignmentpackage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignmentpackage::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignmentpackage::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignmentpackage::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignmentpackage::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignmentpackage::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignmentpackage::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignmentpackage::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f135745c60f8a727cac612213be077d";
  }

  static const char* value(const ::assignmentpackage::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f135745c60f8a72ULL;
  static const uint64_t static_value2 = 0x7cac612213be077dULL;
};

template<class ContainerAllocator>
struct DataType< ::assignmentpackage::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignmentpackage/my_msg";
  }

  static const char* value(const ::assignmentpackage::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignmentpackage::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vel_x\n"
"float32 vel_y\n"
"float32 position_x\n"
"float32 position_y\n"
;
  }

  static const char* value(const ::assignmentpackage::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignmentpackage::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.position_x);
      stream.next(m.position_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignmentpackage::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignmentpackage::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y);
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENTPACKAGE_MESSAGE_MY_MSG_H
